This is a university project and must be take as "it is". 
This project uses a uC with an RTOS functionality. 


The project is split in two parts: 
a simple 'blinky' style starter project
a more comprehensive test and demo application.

 main_blinky() creates one queue, two tasks, and one software timer.  It then starts the scheduler.
 
 The Blinky Software Timer:
 --------------------------
 This demonstrates an auto-reload software timer.  The timer callback function does nothing but toggle an LED.
 
 The Queue Send Task:
 --------------------------
 The queue send task is implemented by the prvQueueSendTask() function in this file.  prvQueueSendTask() sits in a loop that causes it to repeatedly
 block for 200 milliseconds, before sending the value 100 to the queue that was created within main_blinky().  Once the value is sent, the task loops
 back around to block for another 200 milliseconds. 
 The Queue Receive Task:
 --------------------------
 The queue receive task is implemented by the prvQueueReceiveTask() function in this file.  prvQueueReceiveTask() sits in a loop where it repeatedly
 blocks on attempts to read data from the queue that was created within main_blinky().  When data is received, the task checks the value of the
 data, and if the value equals the expected 100, toggles the LED.  The 'block time' parameter passed to the queue receive function specifies that the
 task should be held in the Blocked state indefinitely to wait for data to be available on the queue.  The queue receive task will only leave the
 Blocked state when the queue send task writes to the queue.  As the queue send task writes to the queue every 200 milliseconds, the queue receive
 task leaves the Blocked state every 200 milliseconds, and therefore toggles the LED every 200 milliseconds.
 
